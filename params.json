{"name":"Pocsuite","tagline":"Pocsuite 是知道创宇安全研究团队打造的一款基于漏洞与 PoC 的远程漏洞验证框架，Pocsuite is A remote vulnerability test framework developed by Knownsec Security Team.","body":"```\r\n                              ,--. ,--.\r\n ,---. ,---. ,---.,---.,--.,--`--,-'  '-.,---.\r\n| .-. | .-. | .--(  .-'|  ||  ,--'-.  .-| .-. :\r\n| '-' ' '-' \\ `--.-'  `'  ''  |  | |  | \\   --.\r\n|  |-' `---' `---`----' `----'`--' `--'  `----'\r\n`--'                                   seebug.org\r\n\r\n```\r\nPocsuite 使用帮助文档\r\n================\r\n\r\n*   [Pocsuite 简介](#pocsuite)\r\n*   [安装](#install)\r\n*   [使用方法](#usage)\r\n    *   [命令行模式](#climode)\r\n    *   [控制台交互式视图模式](#consolemode)\r\n    *   [Pocsuite 报告自动生成](#report)\r\n*   [PoC 编写规范及注意事项](#pocnote)\r\n*   [Pocsuite 中文帮助](#helpchinese)\r\n*   [感谢](#thanks)\r\n*   [相关链接](#links)\r\n\r\n* * *\r\n\r\n\r\n<h2 id=\"pocsuite\">Pocsuite 简介</h2>\r\n\r\nPocsuite 是知道创宇安全研究团队打造的一款基于漏洞与 PoC 的漏洞验证框架。Pocsuite 是知道创宇安全研究团队发展的基石，是团队发展至今一直维护的一个项目，保障了我们的 Web 安全研究能力的领先。\r\n\r\n在获取到相关漏洞详情后，任何有一定 Python 开发基础的人都可以基于 Pocsuite 开发出对应漏洞的 PoC 或者 Exp ，轻而易举的就可以直接使用 Pocsuite 进行相关的验证和调用，而无需考虑底层代码架构等。\r\n\r\n在 Seebug 重新改版上线之际，知道创宇安全研究团队正式对外开放 Pocsuite 框架，任何安全研究人员都可以基于 Pocsuite 进行 PoC 或者 Exp 的开发，同时也可以加入 Seebug 漏洞社区，为 Pocsuite 提供贡献或者贡献相关的 PoC。\r\n\r\n\r\n<h2 id=\"install\">安装</h2>\r\n\r\n你可以通过用 Git 来克隆代码仓库中的最新源代码\r\n\r\n```bash\r\n    $ git clone git@github.com:knownsec/Pocsuite.git\r\n```\r\n或者你可以点击 [这里](https://github.com/knownsec/Pocsuite/archive/master.zip) 下载最新的源代码 zip 包,并解压\r\n\r\n```bash\r\n    $ wget https://github.com/knownsec/Pocsuite/archive/master.zip\r\n    $ unzip master.zip\r\n```\r\n\r\n```bash\r\n    $ cd Pocsuite\r\n    $ python pocsuite.py --version\r\n```\r\n\r\n或者直接使用\r\n\r\n```bash\r\n    $ pip install pocsuite\r\n    $ pocsuite --version\r\n```\r\n\r\n<h2 id=\"usage\">使用方法</h2>\r\n\r\n\r\nPocsuite 支持命令行模式(cli)和交互式控制台模式(console), 如果使用 pip 安装, 直接使用`pocsuite`代替`python pocsuite.py`\r\n\r\n<h3 id=\"climode\">命令行模式</h3>\r\n\r\n命令行模式可以对目标发起 Verify 和 Attack 模式的测试,\r\n\r\n进入 pocsuite 目录,执行 pocsuite.py\r\n\r\n获取命令帮助列表\r\n```bash\r\n    $ python pocsuite.py -h\r\n```\r\n\r\n\r\n假定你已经有一个 PoC(poc_example.py),并且将其保存在 tests 目录(**任意目录, 以下如无说明默认为 ./tests **)下面:\r\n\r\nPoC 目前支持.py 文件和 .json 文件两种，两者用法一样,具体参考下方说明\r\n\r\nVerify 模式，验证目标是否存在漏洞:\r\n\r\n```bash\r\n    $ python pocsuite.py -r tests/poc_example.py -u http://www.example.com/ --verify\r\n```\r\nAttack 模式:\r\n```bash\r\n    $ python pocsuite.py -r tests/poc_example.py -u http://www.example.com/ --attack\r\n\r\n```\r\n如果你有一个 URL 文件(url.txt),要批量验证,你可以:\r\n\r\n```bash\r\n    $ python pocsuite.py -r tests/poc_example.py -f url.txt --verify\r\n```\r\n> Attack 模式的批量处理，只需要替换 ```--verify``` 参数为 ```--attack``` 即可.\r\n\r\n\r\n加载 任意目录(如: tests)下的所有 PoC 对目标测试:\r\n\r\n```bash\r\n    $ python pocsuite.py -r tests/ -u http://www.example.com --verify\r\n```\r\n\r\n使用多线程,默认线程数为 1:\r\n```bash\r\n    $ python pocsuite.py -r tests/ -f url.txt --verify --threads 10\r\n```\r\n\r\n<h3 id=\"consolemode\">控制台交互式视图模式</h3>\r\n\r\n进入控制台交互式视图:\r\n```bash\r\n    $ python pcs-console.py\r\n```\r\n\r\n通用命令：\r\n```\r\n    ls, help        展示出当前可用的命令\r\n    q, exit         退出/返回父视图\r\n```\r\n\r\n在 **Pcs 视图**(Pcs>)下,常用的命令:\r\n\r\n```\r\n    config          进入目标配置子视图\r\n    poc             进入 PoC 配置子视图\r\n    verify          开始验证\r\n    attack          开始\r\n    shell [command] 执行系统shell命令\r\n    hi, history     历史命令\r\n    show            显示当前系统设置\r\n    set             修改系统设置\r\n    shortcuts       查看短命令\r\n```\r\n\r\n在 **Config 视图**(Pcs.Config>)下,常用的命令:\r\n```\r\n[Command]\r\n   thread       : 设置最大线程数(默认为1)\r\n   url          : 设置目标 URL\r\n   urlFile      : 载入文件中的 URL\r\n```\r\n\r\n在 **Poc 视图**(Pcs.poc>)下,常用的命令:\r\n```\r\n    avaliable   查看所有可用的 PoC\r\n    search      从可用的 PoC 列表中检索\r\n    load <Id>   加载指定 Id 的 PoC\r\n    loaded      查看已经加载的 PoC\r\n    unload      查看未加载的 PoC\r\n    clear       移出所有已加载的 PoC\r\n```\r\n**注意：控制台视图下只能加载 pocsuite/modules/ 目录下的 PoC**\r\n\r\n#### 使用 pcs-console 测试步骤:\r\n\r\n1. 进入 Config 子视图,设置目标\r\n    ```\r\n    Pcs.Config>url\r\n    Pcs.config.url>www.example.com\r\n    Pcs.Config>show\r\n    +---------+-----------------+\r\n    |  config |      value      |\r\n    +---------+-----------------+\r\n    |   url   | www.example.com |\r\n    | threads |        1        |\r\n    +---------+-----------------+\r\n    或\r\n    Pcs.Config>url example.com\r\n    Pcs.Config>show\r\n    +---------+-------------+\r\n    |  config |    value    |\r\n    +---------+-------------+\r\n    |   url   | example.com |\r\n    | threads |      1      |\r\n    +---------+-------------+\r\n    ```\r\n    \r\n2. 进入 PoC 子视图，加载指定 PoC\r\n    ```\r\n    Pcs>poc\r\n    Pcs.poc>avaliable\r\n    +-------+------------------+\r\n    | pocId | avaliablePocName |\r\n    +-------+------------------+\r\n    |   1   | _poc_example1.py |\r\n    |   2   | poc_example1.py  |\r\n    +-------+------------------+\r\n\r\n    Pcs.poc>load 1\r\n    [*] load poc file(s) success!\r\n\r\n    Pcs.poc>q\r\n    ```\r\n    \r\n3. Verify/Attack\r\n    ```\r\nPcs>verify\r\n[15:13:26] [*] starting 1 threads\r\n[15:13:26] [*] poc:'_poc_example1' target:'www.example.com'\r\n    ```\r\n\r\n<h3 id=\"report\">Pocsuite 报告自动生成</h3>\r\n\r\nPocsuite 默认只会将执行结果输出显示在屏幕上，如需将结果自动生成报告并保存，在扫描参数后加 `--report [report_file]` 即可生成 HTML 格式报告。\r\n\r\n```bash\r\n    $ python pocsuite.py -r tests/poc_example2.py -u example.com --verify --report /tmp/report.html\r\n```\r\n上述命令执行后，会调用 poc_example2.py 并将结果保存到 /tmp/report.html中。\r\n\r\n\r\n<h2 id=\"pocnote\">PoC 编写规范及注意事项</h2>\r\n\r\nPoC 支持 Python 和 JSON 两种格式，详情参见[PoC 编写规范](./docs/POCAPI.md)\r\n\r\n<h2 id=\"helpchinese\">Pocsuite 中文帮助</h2>\r\n\r\n```\r\n使用方法: python pocsuite.py [选项]\r\n\r\n基础帮助:\r\n  -h, --help            显示帮助信息\r\n  --version             显示当前程序版本号\r\n\r\n目标设置:\r\n  -u URL, --url URL     目标 URL (如：\"http://www.targetsite.com/\")\r\n  -f URLFILE, --file URLFILE\r\n                        加载一个文档中的所有 URL，一行一个\r\n  -r POCFILE            加载一个 PoC 或者一个目录下的所有 PoC(如： \"_0001_cms_sql_inj.py\" 或者 \"modules/\")\r\n\r\n模式设置:\r\n  --verify              Verify 模式\r\n  --attack              Attack 模式\r\n\r\n请求设置:\r\n  --cookie COOKIE       自定义 HTTP 请求头中 Cookie 信息\r\n  --referer REFERER     自定义 HTTP 请求头中 Referer 信息\r\n  --user-agent AGENT    自定义 HTTP 请求头中 User-Agent 信息\r\n  --random-agent        使用随机 User-Agent\r\n  --proxy PROXY         使用代理来连接目标\r\n  --proxy-cred PROXYCRED\r\n                        设置代理用户名和密码 (如 name:password)\r\n  --timeout TIMEOUT     设置超时时间(默认30秒)\r\n\r\n其他设置:\r\n  --threads THREADS     最大线程数(默认为1)\r\n  --report REPORT       生成 HTML 格式报告(如：\"./report.html\")\r\n\r\n```\r\n\r\n<h2 id=\"thanks\">感谢</h2>\r\n\r\n* 感谢来自不同同学的建议和帮助\r\n* 也欢迎更多同学参与 Pocsuite 的贡献\r\n* [感谢列表](./docs/THANKS.md)\r\n\r\n<h2 id=\"links\">相关链接</h2>\r\n\r\n* Seebug [http://seebug.org](http://seebug.org)\r\n* 知道创宇 [http://www.knownsec.com](http://seebug.org)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}